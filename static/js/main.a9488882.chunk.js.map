{"version":3,"sources":["logo.svg","Event.jsx","DayChart.jsx","WeekBoard.jsx","Options.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","sourceSpec","beginDrag","props","console","log","this","eventData","Event","sty","background","isDragging","connectDragSource","className","style","React","Component","DragSource","connect","monitor","dragSource","Events","text","catagory","startTime","startDay","duration","dayNames","getSegmentedTime","division","i","dd","Date","setHours","d2","getTime","TimeSlot","isOver","canDrop","connectDropTarget","height","hgt","minHeight","timeLabel","st","toISOString","slice","aa","RenderEvent","di","ti","key","e","find","v","getEventAtThisTime","chessSquareTarget","drop","component","didDrop","item","getItem","moved","DTTS","DropTarget","dropTarget","isOverCurrent","shallow","itemType","getItemType","DayChart","dayindex","amount","ts","Math","floor","push","genTimeslots","timeslices","WeekBoard","items","days","backend","HTML5Backend","Dropdown","state","value","handleChange","bind","handleSubmit","options","optionElements","map","V","I","changeCallback","event","setState","target","alert","preventDefault","onSubmit","onChange","type","Options","info","setGlobalState","App","prop","val","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9488882.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { DragSource, useDrag } from 'react-dnd'\r\n\r\n\r\n\r\nconst Types = {\r\n    ITEM: 'toy'\r\n}\r\nconst sourceSpec = {\r\n    beginDrag(props) {\r\n        console.log(\"begin drag\", this, props);\r\n        return { eventData: props.eventData }\r\n    }\r\n}\r\nconst sourceCollect = (connect, monitor) => {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging()\r\n    }\r\n}\r\n\r\nclass Event extends React.Component {\r\n    sty = { background: \"red\" };\r\n    render() {\r\n        const { isDragging, connectDragSource } = this.props;\r\n        return connectDragSource(\r\n            <div className=\"Event\" style={this.sty} >Hello</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n//export default Event\r\n//export default Event\r\nexport default DragSource(Types.ITEM, sourceSpec, sourceCollect)(Event)","import React from 'react'\r\nimport Event from './Event'\r\nimport { useDrop } from 'react-dnd'\r\nimport { DropTarget } from 'react-dnd'\r\n\r\n//import TimeSlot from './WeekBoard';\r\nlet Events = [\r\n  {\r\n    text: \"work\",\r\n    catagory: \"work\",\r\n    startTime: 0,\r\n    startDay: 0,\r\n    duration: 1\r\n  },\r\n  {\r\n    text: \"Fart\",\r\n    catagory: \"fart\",\r\n    startTime: 0,\r\n    startDay: 1,\r\n    duration: 1\r\n  }\r\n];\r\n\r\nfunction getEventAtThisTime(di, ti){\r\n  return Events.find((v,i)=>v.startDay=== di && v.startTime=== ti );\r\n}\r\nfunction getEventsOverlappingThisTime(di, ti){\r\n  return Events.find((v,i)=>v.startDay=== di && (v.startTime <= ti && v.startTime + v.duration >= ti ) );\r\n}\r\nconst dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\r\nconst getSegmentedTime = (division, i) => {\r\n  const dd = new Date(0);\r\n  dd.setHours(9);\r\n  let d2 = new Date(dd);\r\n  d2.setHours(17);\r\n  return new Date(dd.getTime() + (i * ((d2 - dd)) / division))\r\n}\r\n\r\nclass TimeSlot extends React.Component {\r\n  render() {\r\n    // These props are injected by React DnD,\r\n    // as defined by your `collect` function above:\r\n    const { isOver, canDrop, connectDropTarget } = this.props\r\n\r\n    const sty = { height: this.props.hgt + '%', minHeight: this.props.hgt + '%' }\r\n    const timeLabel = this.props.st.toISOString().slice(11, 16);\r\n    let aa = this.RenderEvent(this.props.di, this.props.ti);\r\n    if (!aa) {\r\n      aa = (\r\n        <div className=\"TimeSlotLabel\">\r\n          {this.props.di} - {this.props.ti} - {timeLabel}\r\n        </div>\r\n      )\r\n    }\r\n    /*return (\r\n      <div className=\"TimeSlot\" style={sty} key={this.props.ti}>\r\n        {aa}\r\n      </div>)*/\r\n\r\n    return connectDropTarget(\r\n      <div className=\"TimeSlot\" style={sty} key={this.props.ti}>\r\n        {isOver && canDrop && \"G\"}\r\n        {!isOver && canDrop && \"R\"}\r\n        {isOver && !canDrop && \"B\"}\r\n        {aa}\r\n      </div>,\r\n    )\r\n\r\n  }\r\n  RenderEvent(di, ti) {\r\n    const e = getEventAtThisTime(di,ti);\r\n    return e ? <Event eventData={e} /> : null\r\n  }\r\n}\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDropTarget: connect.dropTarget(),\r\n    // You can ask the monitor about the current drag state:\r\n    isOver: monitor.isOver(),\r\n    isOverCurrent: monitor.isOver({ shallow: true }),\r\n    canDrop: monitor.canDrop(),\r\n    itemType: monitor.getItemType(),\r\n  }\r\n}\r\nconst chessSquareTarget = {\r\n  drop(props, monitor, component) {\r\n    if (monitor.didDrop()) {\r\n      // If you want, you can check whether some nested\r\n      // target already handled drop\r\n      return\r\n    }\r\n\r\n    // Obtain the dragged item\r\n    const item = monitor.getItem()\r\n    console.log(\"Hello drop\", this, item, props);\r\n    item.eventData.startDay = props.di;\r\n    item.eventData.startTime = props.ti;\r\n    // You can do something with it\r\n    // ChessActions.movePiece(item.fromPosition, props.position)\r\n\r\n    // You can also do nothing and return a drop result,\r\n    // which will be available as monitor.getDropResult()\r\n    // in the drag source's endDrag() method\r\n    return { moved: true }\r\n  }\r\n}\r\n\r\nlet DTTS = DropTarget('toy', chessSquareTarget, collect)(TimeSlot)\r\n\r\nconst genTimeslots = (di, amount) => {\r\n  const ts = []\r\n  const hgt = Math.floor(100.0 / amount);\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    ts.push(<DTTS di={di} ti={i} hgt={hgt} key={i} st={getSegmentedTime(amount, i)} />)\r\n  }\r\n  return ts;\r\n}\r\n\r\n\r\n\r\n\r\nclass DayChart extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"DayChart\">\r\n        <div className=\"DayHeadder\">{dayNames[this.props.dayindex]}</div>\r\n        <div className=\"DayTimeSlots\">{genTimeslots(this.props.dayindex, this.props.timeslices)}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default DayChart\r\n\r\n","import React from 'react'\r\nimport DayChart from './DayChart'\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\n\r\nconst containerStyle = {\r\n    ///width: 500,\r\n    //height: 500,\r\n    // border: '1px solid gray',\r\n    className: \"WeekBoard\"\r\n}\r\n\r\nclass WeekBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"WB Render\", this.props);\r\n        const items = []\r\n        for (let i = 0; i < this.props.days; i++) {\r\n            items.push(<DayChart dayindex={i} key={i} timeslices={this.props.timeslices} />)\r\n        }\r\n        return (\r\n            <DndProvider backend={HTML5Backend}>\r\n            <div className=\"WeekBoard\">\r\n                {items}\r\n            </div>\r\n            </DndProvider>\r\n        )\r\n    }\r\n}\r\nexport default WeekBoard\r\n","import React from 'react'\r\n\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: 'coconut' };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        if (!props.options) {\r\n            props.options = [];\r\n            this.optionElements = [(<option>DropDown with no Options!</option>)];\r\n        } else {\r\n            this.optionElements = props.options.map((V, I) => (<option value={V[0]} key={I}>{V[1]}</option>))\r\n        }\r\n        if (!props.changeCallback) {\r\n            this.changeCallback = () => { };\r\n        } else {\r\n            this.changeCallback = props.changeCallback;\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n        this.changeCallback({ value: event.target.value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('Your favorite flavor is: ' + this.state.value);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label>\r\n                    Pick your favorite flavor:\r\n            <select value={this.state.value} onChange={this.handleChange}>\r\n                        {this.optionElements}\r\n                    </select>\r\n                </label>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nclass Options extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.info(props);\r\n    }\r\n    render() {\r\n        let fcb = (v)=>this.props.setGlobalState(\"timeslices\",v.value)\r\n        return (\r\n            <div className=\"OptionsBar\">\r\n                <Dropdown options={[[8, \"Hourly\"], [16, \"Half-hourly\"], [24, \"15 Mins\"]]} changeCallback={fcb} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Options\r\n","import React from 'react';\nimport WeekBoard from './WeekBoard';\nimport Options from './Options';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    // this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = { timeslices: 8, days: 5 };\n    this.setGlobalState = this.setGlobalState.bind(this);\n  }\n  setGlobalState(prop, val) {\n    let aa= {}\n    aa[prop] = val;\n    this.setState(aa);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"></header>\n        <WeekBoard timeslices={this.state.timeslices} days={this.state.days}/>\n        <Options  setGlobalState={this.setGlobalState} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}