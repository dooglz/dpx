{"version":3,"sources":["Event.jsx","data.js","DayChart.jsx","WeekBoard.jsx","utils/DropDown.jsx","Options.jsx","BackLog.jsx","App.js","serviceWorker.js","index.js"],"names":["sourceSpec","beginDrag","props","console","log","this","eventData","Event","sty","background","isDragging","connectDragSource","className","style","text","React","Component","DragSource","connect","monitor","dragSource","axios","require","Data","ID","SERVER","_updateCB","GetEvents","events","NewEvent","push","catagory","allocated","startTime","startDay","duration","Sync","_lastServerdata","get","params","uid","then","response","JSON","parse","data","info","catch","error","status","SendToServer","name","a","stringify","d","options","method","headers","url","dayNames","getSegmentedTime","division","i","dd","Date","setHours","d2","getTime","TimeSlot","di","ti","find","v","isOver","canDrop","connectDropTarget","height","hgt","minHeight","timeLabel","st","toISOString","slice","aa","RenderEvent","key","e","getEventAtThisTime","chessSquareTarget","drop","component","didDrop","item","getItem","moved","DTTS","DropTarget","dropTarget","isOverCurrent","shallow","itemType","getItemType","DayChart","genTimeslots","amount","ts","Math","floor","dayindex","timeslices","WeekBoard","items","days","width","small","backend","HTML5Backend","Dropdown","state","value","handleChange","bind","handleSubmit","optionElements","map","V","I","changeCallback","event","setState","target","alert","preventDefault","onSubmit","label","onChange","Options","setGlobalState","type","checked","BacklogList","filter","collect","BackLog","BLDT_DropHandler","BLDT","onClick","App","prop","val","showbacklog","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f195084.chunk.js","sourcesContent":["import React from 'react'\r\nimport { DragSource, useDrag } from 'react-dnd'\r\n\r\n\r\n\r\nconst Types = {\r\n    ITEM: 'toy'\r\n}\r\nconst sourceSpec = {\r\n    beginDrag(props) {\r\n        console.log(\"begin drag\", this, props);\r\n        return { eventData: props.eventData }\r\n    }\r\n}\r\nconst sourceCollect = (connect, monitor) => {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging()\r\n    }\r\n}\r\n\r\nclass Event extends React.Component {\r\n    sty = { background: \"red\" };\r\n    render() {\r\n        const { isDragging, connectDragSource } = this.props;\r\n        return connectDragSource(\r\n            <div className=\"Event\" style={this.sty} >{this.props.eventData.text}</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n//export default Event\r\n//export default Event\r\nexport default DragSource(Types.ITEM, sourceSpec, sourceCollect)(Event)","const axios = require('axios');\r\n\r\nlet Data = {};\r\nconst ID = \"kE3KkG0cvvetoGPLicbW7\";\r\nconst SERVER = \"https://www.samserrels.com/jsonStore/data.php\"\r\n\r\nlet _updateCB = () => { };\r\nfunction onUpdate(a) {\r\n    _updateCB = a;\r\n}\r\n\r\nfunction GetEvents() {\r\n    return Data.events;\r\n}\r\n\r\nfunction NewEvent() {\r\n    Data.events.push({\r\n        text: \"New Event\",\r\n        catagory: \"\",\r\n        allocated: false,\r\n        startTime: 0,\r\n        startDay: 0,\r\n        duration: 1\r\n    })\r\n    Sync();\r\n}\r\n\r\nlet _lastServerdata = \"\";\r\nfunction Sync() {\r\n    //Nothing from server yet\r\n    if (_lastServerdata == \"\") {\r\n        GetFromServer().then(function (response) {\r\n            Data = JSON.parse(response.data.data);\r\n            if(!Data.events){\r\n                Data.events = [];\r\n            }\r\n            _lastServerdata = response.data.data;\r\n            console.info(\"Got Data from server\", Data);\r\n            _updateCB();\r\n        }).catch(function (error) {\r\n            if (error.response && error.response.status == 404) {\r\n                //Doesn't exist yet\r\n                console.info(\"Creating new user on Server\");\r\n                let newUser = { name: \"Sam\", events: [] };\r\n                SendToServer(newUser).then(() => {console.info(\"new user Created\"); Sync(); }, (a) => { console.log(3, a) })\r\n               \r\n            } else {\r\n                console.error(2, JSON.stringify(error),error);\r\n            }\r\n        });\r\n    } else {\r\n        //has events changed?  \r\n        if (JSON.stringify(Data) !== _lastServerdata) {\r\n            console.info(\"Updating Server\",Data);\r\n            SendToServer(Data).then(() => {console.info(\"Server Updated\"); }, (a) => { console.log(5, a) })\r\n            _updateCB();\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nfunction GetFromServer() {\r\n    return axios.get(SERVER, { params: { uid: ID } });\r\n}\r\n\r\nfunction SendToServer(d) {\r\n    var qs = require('qs');\r\n    const options = {\r\n        method: 'PUT',\r\n        headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n        data: qs.stringify({\r\n            uid: ID,\r\n            data: JSON.stringify(d)\r\n        }),\r\n        url: SERVER,\r\n    };\r\n    return axios(options);\r\n}\r\n\r\n\r\nfunction Login() {\r\n\r\n}\r\n\r\nfunction Logout() {\r\n\r\n}\r\n\r\nexport { Sync, NewEvent, GetEvents, onUpdate }","import React from 'react'\r\nimport Event from './Event'\r\nimport { useDrop } from 'react-dnd'\r\nimport { DropTarget } from 'react-dnd'\r\nimport { Sync } from './data'\r\n\r\n//import TimeSlot from './WeekBoard';\r\n\r\n\r\nconst dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\r\nconst getSegmentedTime = (division, i) => {\r\n  const dd = new Date(0);\r\n  dd.setHours(9);\r\n  let d2 = new Date(dd);\r\n  d2.setHours(17);\r\n  return new Date(dd.getTime() + (i * ((d2 - dd)) / division))\r\n}\r\n\r\nclass TimeSlot extends React.Component {\r\n   getEventAtThisTime(di, ti){\r\n    return this.props.events.find((v,i)=>v.allocated && v.startDay=== di && v.startTime=== ti );\r\n  }\r\n   getEventsOverlappingThisTime(di, ti){\r\n    return this.props.events.find((v,i)=>v.startDay=== di && (v.startTime <= ti && v.startTime + v.duration >= ti ) );\r\n  }\r\n  render() {\r\n    // These props are injected by React DnD,\r\n    // as defined by your `collect` function above:\r\n    const { isOver, canDrop, connectDropTarget } = this.props\r\n\r\n    const sty = { height: this.props.hgt + '%', minHeight: this.props.hgt + '%' }\r\n    const timeLabel = this.props.st.toISOString().slice(11, 16);\r\n    let aa = this.RenderEvent(this.props.di, this.props.ti);\r\n    if (!aa) {\r\n      aa = (\r\n        <div className=\"TimeSlotLabel\">\r\n          {this.props.di} - {this.props.ti} - {timeLabel}\r\n        </div>\r\n      )\r\n    }\r\n    /*return (\r\n      <div className=\"TimeSlot\" style={sty} key={this.props.ti}>\r\n        {aa}\r\n      </div>)*/\r\n\r\n    return connectDropTarget(\r\n      <div className=\"TimeSlot\" style={sty} key={this.props.ti}>\r\n        {isOver && canDrop && \"G\"}\r\n        {!isOver && canDrop && \"R\"}\r\n        {isOver && !canDrop && \"B\"}\r\n        {aa}\r\n      </div>,\r\n    )\r\n\r\n  }\r\n  RenderEvent(di, ti) {\r\n    const e = this.getEventAtThisTime(di,ti);\r\n    return e ? <Event eventData={e} /> : null\r\n  }\r\n}\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDropTarget: connect.dropTarget(),\r\n    // You can ask the monitor about the current drag state:\r\n    isOver: monitor.isOver(),\r\n    isOverCurrent: monitor.isOver({ shallow: true }),\r\n    canDrop: monitor.canDrop(),\r\n    itemType: monitor.getItemType(),\r\n  }\r\n}\r\nconst chessSquareTarget = {\r\n  drop(props, monitor, component) {\r\n    if (monitor.didDrop()) {\r\n      // If you want, you can check whether some nested\r\n      // target already handled drop\r\n      return\r\n    }\r\n\r\n    // Obtain the dragged item\r\n    const item = monitor.getItem()\r\n    console.log(\"Hello drop\", this, item, props);\r\n    item.eventData.startDay = props.di;\r\n    item.eventData.startTime = props.ti\r\n    item.eventData.allocated = true;\r\n    Sync();\r\n    // You can do something with it\r\n    // ChessActions.movePiece(item.fromPosition, props.position)\r\n\r\n    // You can also do nothing and return a drop result,\r\n    // which will be available as monitor.getDropResult()\r\n    // in the drag source's endDrag() method\r\n    return { moved: true }\r\n  }\r\n}\r\n\r\nlet DTTS = DropTarget('toy', chessSquareTarget, collect)(TimeSlot)\r\n\r\n\r\n\r\n\r\nclass DayChart extends React.Component {\r\n  genTimeslots = (di, amount) => {\r\n    const ts = []\r\n    const hgt = Math.floor(100.0 / amount);\r\n  \r\n    for (let i = 0; i < amount; i++) {\r\n      ts.push(<DTTS events={this.props.events} di={di} ti={i} hgt={hgt} key={i} st={getSegmentedTime(amount, i)} />)\r\n    }\r\n    return ts;\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"DayChart\">\r\n        <div className=\"DayHeadder\">{dayNames[this.props.dayindex]}</div>\r\n        <div className=\"DayTimeSlots\">{this.genTimeslots(this.props.dayindex, this.props.timeslices)}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default DayChart\r\n\r\n","import React from 'react'\r\nimport DayChart from './DayChart'\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\n\r\nconst containerStyle = {\r\n    ///width: 500,\r\n    //height: 500,\r\n    // border: '1px solid gray',\r\n    className: \"WeekBoard\"\r\n}\r\n\r\nclass WeekBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"WB Render\", this.props);\r\n        const items = []\r\n        for (let i = 0; i < this.props.days; i++) {\r\n            items.push(<DayChart events={this.props.events} dayindex={i} key={i} timeslices={this.props.timeslices} />)\r\n        }\r\n        const width=(this.props.small? \"68%\":\"98%\");\r\n        return (\r\n            <DndProvider backend={HTML5Backend}>\r\n            <div className=\"WeekBoard\" style={{width:width}}>\r\n                {items}\r\n            </div>\r\n            </DndProvider>\r\n        )\r\n    }\r\n}\r\nexport default WeekBoard\r\n","import React from 'react'\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: 'coconut' };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        if (!props.options) {\r\n            props.options = [];\r\n            this.optionElements = [(<option>DropDown with no Options!</option>)];\r\n        } else {\r\n            this.optionElements = props.options.map((V, I) => (<option value={V[0]} key={I}>{V[1]}</option>))\r\n        }\r\n        if (!props.changeCallback) {\r\n            this.changeCallback = () => { };\r\n        } else {\r\n            this.changeCallback = props.changeCallback;\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n        this.changeCallback({ value: event.target.value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('Your favorite flavor is: ' + this.state.value);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label>\r\n                    {this.props.label}\r\n                    <select value={this.state.value} onChange={this.handleChange}>\r\n                    {this.optionElements}\r\n                    </select>\r\n                </label>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Dropdown","import React from 'react'\r\n\r\nimport Dropdown from './utils/DropDown'\r\n\r\nclass Options extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.info(props);\r\n    }\r\n    render() {\r\n        let fcb = (v)=>this.props.setGlobalState(\"timeslices\",v.value)\r\n        return (\r\n            <div className=\"OptionsBar\">\r\n                <div> <Dropdown options={[[8, \"Hourly\"], [16, \"Half-hourly\"], [24, \"15 Mins\"]]} changeCallback={fcb} label=\"Time Division\"/></div>\r\n                <div> <input type=\"checkbox\" name=\"ShowBacklog\" onChange={(event)=>this.props.setGlobalState(\"showbacklog\",event.target.checked)}/>Show Backlog</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Options\r\n","import React from 'react'\r\nimport { DropTarget } from 'react-dnd'\r\nimport { NewEvent, GetEvents } from './data'\r\nimport Event from './Event'\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\nimport { Sync } from './data'\r\n\r\nclass BacklogList extends React.Component {\r\n    RenderEvent() {\r\n        console.info(\"RenderEvent\", this.props)\r\n        if (this.props.events) {\r\n            let a = this.props.events.filter((V) => !V.allocated);\r\n            console.info(\"RenderEvent2\", a)\r\n            return a.map((V) => (<Event eventData={V} />))\r\n        }\r\n    }\r\n    render() {\r\n        const { isOver, canDrop, connectDropTarget } = this.props\r\n        console.info(\"BacklogList render\", this.props)\r\n        return connectDropTarget(<div className=\"backlogList\" >{this.RenderEvent()}</div>)\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction collect(connect, monitor) {\r\n    return {\r\n        // Call this function inside render()\r\n        // to let React DnD handle the drag events:\r\n        connectDropTarget: connect.dropTarget(),\r\n        // You can ask the monitor about the current drag state:\r\n        isOver: monitor.isOver(),\r\n        isOverCurrent: monitor.isOver({ shallow: true }),\r\n        canDrop: monitor.canDrop(),\r\n        itemType: monitor.getItemType(),\r\n    }\r\n}\r\n\r\n\r\n\r\nclass BackLog extends React.Component {\r\n\r\n    render() {\r\n        const BLDT_DropHandler = {\r\n            drop(props, monitor, component) {\r\n\r\n                if (monitor.didDrop()) {\r\n                    return\r\n                }\r\n                // Obtain the dragged item\r\n                const item = monitor.getItem()\r\n                console.log(\"Hello drop\", this, item, props);\r\n                item.eventData.allocated = false;\r\n                Sync();\r\n                return { moved: true }\r\n            }\r\n        }\r\n        let BLDT = DropTarget('toy', BLDT_DropHandler, collect)(BacklogList);\r\n        console.info(\"BackLog render\", this.props)\r\n        return (\r\n            <div className=\"backlog\">\r\n                <div className=\"backlogHeadder\">\r\n                    <button type=\"button\" onClick={NewEvent}>New</button> Backlog\r\n                </div>\r\n                <DndProvider backend={HTML5Backend}>\r\n                    <BLDT events={this.props.events} />\r\n                </DndProvider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BackLog","import React from 'react';\r\nimport WeekBoard from './WeekBoard';\r\nimport Options from './Options';\r\nimport Backlog from './BackLog';\r\nimport './App.css';\r\nimport {Sync,onUpdate, GetEvents} from './data';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n    // this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n    this.state = { timeslices: 8, days: 5 };\r\n    this.setGlobalState = this.setGlobalState.bind(this);\r\n    this.state.events =[];\r\n    onUpdate(()=>{console.log(GetEvents(),this.state);this.setGlobalState(\"events\",GetEvents())})\r\n    Sync();\r\n  }\r\n  setGlobalState(prop, val) {\r\n    let aa= {}\r\n    aa[prop] = val;\r\n    this.setState(aa);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\"></header>\r\n        {this.state.showbacklog &&\r\n          <Backlog events={this.state.events}/>\r\n        }\r\n        <WeekBoard timeslices={this.state.timeslices} days={this.state.days} small={this.state.showbacklog} events={this.state.events}/>\r\n        <Options  setGlobalState={this.setGlobalState} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Sync} from './data';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}